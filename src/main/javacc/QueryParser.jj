
options
{
  STATIC = false;
  
  JAVA_UNICODE_ESCAPE = false;
  
  USER_CHAR_STREAM = false;
  
  UNICODE_INPUT = true; // is ignored with user_char_stream
  
  JDK_VERSION = "1.7";
}

PARSER_BEGIN(QueryParser)

package org.outermedia.solrfusion.query.parser;

import java.io.IOException;
import java.io.StringReader;
import java.text.Collator;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.text.SimpleDateFormat;

import lombok.extern.slf4j.Slf4j;

import org.outermedia.solrfusion.configuration.Configuration;
import org.outermedia.solrfusion.configuration.FusionField;
import org.outermedia.solrfusion.configuration.DefaultFieldType;
import org.outermedia.solrfusion.query.parser.BooleanClause.Occur;
import org.outermedia.solrfusion.mapper.Term;

/**
 * This class is generated by JavaCC. The most important method is
 * {@link #parse(String)}.
 * <p>
 * In BNF the syntax for query strings is as follows:
 * 
 * <pre>
 * LuceneQuery  ::= BooleanQuery
 * BooleanQuery  ::= ( BooleanClause )*
 * BooleanClause ::= ["+", "-"] [&lt;FIELD&gt; ":"] ( &lt;TERM&gt; | "(" LuceneQuery ")" )
 * </pre>
 * 
 * <p>
 * For more information take a look at Lucene's QueryParser documentation.
 * </p>
 * 
 */
@SuppressWarnings({"unused", "deprecation"})
@Slf4j
public class QueryParser {

  private static final int CONJ_NONE   = 0;
  private static final int CONJ_AND    = 1;
  private static final int CONJ_OR     = 2;

  private static final int MOD_NONE    = 0;
  private static final int MOD_NOT     = 10;
  private static final int MOD_REQ     = 11;

  // make it possible to call setDefaultOperator() without accessing 
  // the nested class:
  /** Alternative form of QueryParser.Operator.AND */
  public static final Operator AND_OPERATOR = Operator.AND;
  /** Alternative form of QueryParser.Operator.OR */
  public static final Operator OR_OPERATOR = Operator.OR;

  
  /** The actual operator that parser uses to combine query terms */
  private Operator operator = OR_OPERATOR;

  boolean lowercaseExpandedTerms = true;
  boolean allowLeadingWildcard = false;
  Boolean allTermsAreProcessed;

  String field;
  int phraseSlop = 0;
  int fuzzyMinSim = 2;
  int fuzzyPrefixLength = 0;
  Locale locale = Locale.getDefault();
  Configuration configuration;
  Map<String, Float> boosts;

  /** count opened and closed parentheses for error reporting */
  int openParentheses = 0;

  /** The default operator for parsing queries. 
   * Use {@link QueryParser#setDefaultOperator} to change it.
   */
  static public enum Operator { OR, AND }

  /** Constructs a query parser.
   *  @param f  the default field for query terms.
   *  @param configuration  contains the defaults.
   *  @param boosts a field x boost value map
   */
  public QueryParser(String f, Configuration configuration, Map<String, Float> boosts, Operator defaultOperator, Boolean allTermsAreProcessed) {
    this(new StringReader(""));
    field = f;
    this.boosts = boosts;
    this.configuration = configuration;
    this.operator = defaultOperator;
    this.allTermsAreProcessed = allTermsAreProcessed;
  }

  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.
   *  @param query  the query string to be parsed.
   *  @throws ParseException if the parsing fails
   */
  public Query parse(String query) throws ParseException {
    ReInit(new StringReader(query));
    try {
      // TopLevelQuery is a Query followed by the end-of-input (EOF)
      Query res = TopLevelQuery(field);
      return (res != null ? res : newBooleanQuery());
    }
    catch (ParseException tme) {
      // rethrow to include the original query:
      ParseException e = new ParseException("Cannot interpret query '" +query+ "': " + tme.getMessage());
      e.initCause(tme);
      throw e;
    }
    catch (TokenMgrError tme) {
      ParseException e = new ParseException("Cannot interpret query '" +query+ "': " + tme.getMessage());
      e.initCause(tme);
      throw e;
    }
  }

   /**
   * Get the open parentheses count. {@code <1} when more parentheses were
   * closed than opened, {@code >1} when not all parentheses are closed and
   * {@code 0} when parentheses look fine.
   *
   * @return Returns the open parentheses count.
   */
  public int getOpenParentheses() {
    return openParentheses;
  }

  /**
   * @return Returns the field.
   */
  public String getField() {
    return field;
  }
  
   /**
   * Get the minimal similarity for fuzzy queries.
   */
  public int getFuzzyMinSim() {
      return fuzzyMinSim;
  }

  /**
   * Set the minimum similarity for fuzzy queries.
   * Default is 0.5f.
   */
  public void setFuzzyMinSim(int fuzzyMinSim) {
      this.fuzzyMinSim = fuzzyMinSim;
  }

   /**
   * Get the prefix length for fuzzy queries. 
   * @return Returns the fuzzyPrefixLength.
   */
  public int getFuzzyPrefixLength() {
    return fuzzyPrefixLength;
  }

  /**
   * Set the prefix length for fuzzy queries. Default is 0.
   * @param fuzzyPrefixLength The fuzzyPrefixLength to set.
   */
  public void setFuzzyPrefixLength(int fuzzyPrefixLength) {
    this.fuzzyPrefixLength = fuzzyPrefixLength;
  }

  /**
   * Sets the default slop for phrases.  If zero, then exact phrase matches
   * are required.  Default value is zero.
   */
  public void setPhraseSlop(int phraseSlop) {
    this.phraseSlop = phraseSlop;
  }

  /**
   * Gets the default slop for phrases.
   */
  public int getPhraseSlop() {
    return phraseSlop;
  }

  /**
   * Set to <code>true</code> to allow leading wildcard characters.
   * <p>
   * When set, <code>*</code> or <code>?</code> are allowed as 
   * the first character of a PrefixQuery and WildcardQuery.
   * Note that this can produce very slow
   * queries on big indexes. 
   * <p>
   * Default: false.
   */
  public void setAllowLeadingWildcard(boolean allowLeadingWildcard) {
    this.allowLeadingWildcard = allowLeadingWildcard;
  }

  /**
   * @see #setAllowLeadingWildcard(boolean)
   */
  public boolean getAllowLeadingWildcard() {
    return allowLeadingWildcard;
  }

  /**
   * Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
   * lower-cased or not.  Default is <code>true</code>.
   */
  public void setLowercaseExpandedTerms(boolean lowercaseExpandedTerms) {
    this.lowercaseExpandedTerms = lowercaseExpandedTerms;
  }


  /**
   * @see #setLowercaseExpandedTerms(boolean)
   */
  public boolean getLowercaseExpandedTerms() {
    return lowercaseExpandedTerms;
  }

  /**
   * Set locale used by date range parsing.
   */
  public void setLocale(Locale locale) {
    this.locale = locale;
  }

  /**
   * Returns current locale, allowing access by subclasses.
   */
  public Locale getLocale() {
    return locale;
  }
  
  protected <T> void addClause(List<T> list, T item)
  {
    if (item != null) list.add(item);
  }
  
  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {
    boolean required, prohibited;

    // If this term is introduced by AND, make the preceding term required,
    // unless it's already prohibited
    if (clauses.size() > 0 && conj == CONJ_AND) {
      BooleanClause c = clauses.get(clauses.size()-1);
      if (!c.isProhibited())
        c.setOccur(Occur.OCCUR_MUST);
    }

    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {
      // If this term is introduced by OR, make the preceding term optional,
      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)
      // notice if the input is a OR b, first term is parsed as required; without
      // this modification a OR b would parsed as +a OR b
      BooleanClause c = clauses.get(clauses.size()-1);
      if (!c.isProhibited())
        c.setOccur(Occur.OCCUR_SHOULD);
    }

    // We might have been passed a null query; the term might have been
    // filtered away by the analyzer.
    if (q == null)
      return;

    if (operator == OR_OPERATOR) {
      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if
      // introduced by NOT or -; make sure not to set both.
      prohibited = (mods == MOD_NOT);
      required = (mods == MOD_REQ);
      if (conj == CONJ_AND && !prohibited) {
        required = true;
      }
    } else {
      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED
      // if not PROHIBITED and not introduced by OR
      prohibited = (mods == MOD_NOT);
      required   = (!prohibited && conj != CONJ_OR);
    }
    if (required && !prohibited)
      addClause(clauses, newBooleanClause(q, Occur.OCCUR_MUST));
    else if (!required && !prohibited)
      addClause(clauses, newBooleanClause(q, Occur.OCCUR_SHOULD));
    else if (!required && prohibited)
      addClause(clauses, newBooleanClause(q, Occur.OCCUR_MUST_NOT));
    else
      throw new RuntimeException("Clause cannot be both required and prohibited");
  }

  /**
   * @exception ParseException throw in overridden method to disallow
   */
  protected TermQuery getFieldQuery(String field, String queryText)  throws ParseException {
    TermQuery tq = newTermQuery(newTerm(field, queryText));
    return tq;
  }

  protected PhraseQuery getPhraseQuery(String field, String queryText, Integer slop)
        throws ParseException {
    PhraseQuery pq = new PhraseQuery(newTerm(field,queryText));
    if(slop != null) pq.setMaxEdits(slop);
    return pq;
  }


  /**
   * @exception ParseException throw in overridden method to disallow
   */
  protected NumericRangeQuery getRangeQuery(String field,
                                String part1,
                                String part2,
                                boolean inclusive) throws ParseException
  {
    return newRangeQuery(field, part1, part2, inclusive);
  }

  protected BooleanQuery newBooleanQuery() {
    return new BooleanQuery();
  }

 /**
  * Builds a new BooleanClause instance
  * @param q sub query
  * @param occur how this clause should occur when matching documents
  * @return new BooleanClause instance
  */
  protected BooleanClause newBooleanClause(Query q, Occur occur) {
    return new BooleanClause(q, occur);
  }
 
  /**
   * Builds a new TermQuery instance
   * @param term term
   * @return new TermQuery instance
   */
  protected TermQuery newTermQuery(Term term){
    TermQuery result = new TermQuery(term);
    if(boosts != null) {
    	String boostField = term.field();
    	if(boostField == null) boostField = field; // default search field
    	Float boostValue = boosts.get(boostField);
    	if(boostValue != null) result.setBoost((float)boostValue);
    }
    return result;
  }

  protected Term newTerm(String field, String value) throws ParseException
  {
    Term t = Term.newFusionTerm(field,value);
    if(allTermsAreProcessed != null && allTermsAreProcessed)
    {
        t.setProcessed(true);
        t.setWasMapped(true);
        t.setSearchServerFieldName(field);
        t.setSearchServerFieldValue(t.getFusionFieldValue());
    } else {
        FusionField fusionField = configuration.findFieldByName(field);
        if(fusionField == null)
        {
          throw new ParseException("Didn't find field '"+field+"' in fusion schema. Please define it there.");
        }
        t.setFusionField(fusionField);
    }
    return t;
  }

  /**
   * Builds a new PrefixQuery instance
   * @param prefix Prefix term
   * @return new PrefixQuery instance
   */
  protected PrefixQuery newPrefixQuery(Term prefix){
    PrefixQuery query = new PrefixQuery(prefix);
    return query;
  }

  protected FuzzyQuery newFuzzyQuery(Term term, Integer maxEdits) {
    return new FuzzyQuery(term,maxEdits);
  }

  /**
   * Builds a new TermRangeQuery instance
   * @param field Field
   * @param part1 min
   * @param part2 max
   * @param inclusive true if range is inclusive
   * @return new TermRangeQuery instance
   */
  protected NumericRangeQuery newRangeQuery(String field, String part1, String part2, boolean inclusive) 
  	throws ParseException
  {
   	FusionField ft = configuration.findFieldByName(field);
	NumericRangeQuery query = null;
	if(isLongField(ft)) {
	    Long min = null;
	    Long max = null;
	    if(part1 != null && !"*".equals(part1)) min = Long.parseLong(part1);
	    if(part2 != null && !"*".equals(part2)) max = Long.parseLong(part2);
	    query = NumericRangeQuery.newLongRange(field, min, max, inclusive, inclusive);
	} else if(isIntField(ft)) {
	    Integer min = null;
	    Integer max = null;
	    if(part1 != null && !"*".equals(part1)) min = Integer.parseInt(part1);
	    if(part2 != null && !"*".equals(part2)) max = Integer.parseInt(part2);
	    query = NumericRangeQuery.newIntRange(field, min, max, inclusive, inclusive);
	} else if(isFloatField(ft)) {
	    Float min = null;
	    Float max = null;
	    if(part1 != null && !"*".equals(part1)) min = Float.parseFloat(part1);
	    if(part2 != null && !"*".equals(part2)) max = Float.parseFloat(part2);
	    // internal default value 4 is not working to find with e.g. [30.1 TO 34.2]
	    // a document with float 33.1; 20 is the minimum where it starts working
	    query = NumericRangeQuery.newFloatRange(field, min, max, inclusive, inclusive);
	} else if(isDoubleField(ft)) {
	    Double min = null;
	    Double max = null;
	    if(part1 != null && !"*".equals(part1)) min = Double.parseDouble(part1);
	    if(part2 != null && !"*".equals(part2)) max = Double.parseDouble(part2);
	    // internal default value 4 is not working to find with e.g. [30.1 TO 34.2]
	    // a document with double 33.1; 49 is the minimum where it starts working
	    query = NumericRangeQuery.newDoubleRange(field, min, max, inclusive, inclusive);
	} else if(isDateField(ft)) {
		Calendar min = null;
	    Calendar max = null;
	    DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM, locale);
	    if(ft.getFormat() != null)
	    {
	        dateFormat = new SimpleDateFormat(ft.getFormat(), locale);
	    }
	    // for dates we want upper case 'T' and 'Z'
        if(part1 != null && !"*".equals(part1))
        {
            min = checkDate(part1.toUpperCase(), false, dateFormat);
        }
        if(part2 != null && !"*".equals(part2))
        {
            max = checkDate(part2.toUpperCase(), inclusive, dateFormat);
        }
        query = NumericRangeQuery.newDateRange(field, min, max, inclusive, inclusive);
	} else {
		throw new ParseException("Unsupported range query type: " + ft.getFieldType() + " in " + ft);
	}
    return query;
  }

  protected Calendar checkDate(String ds, boolean endInclusive, DateFormat df) throws ParseException
  {
    df.setLenient(true);
    try {
      Date d1 = df.parse(ds);
      Calendar cal = Calendar.getInstance(locale);
      cal.setTime(d1);
      if (endInclusive) {
        // The user can only specify the date, not the time, so make sure
        // the time is set to the latest possible time of that date to really
        // include all documents:
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        cal.set(Calendar.MILLISECOND, 999);
      }
      return cal;
    } catch (Exception e) {
        log.error("Caught exception while parsing date '"+ds+"'", e);
        throw new ParseException("Invalid date value: '" + ds + "'");
    }
  }

  // not used
  public static Date parseSolrDate(String date) throws ParseException
  {
  	String errorMsgText = "Invalid date value '" + date
			+ "'. Format is yyyy-MM-dd'T'HH:mm:ss[.S[S[S]]]'Z'";
	String suffix[] =
	{
		"'Z'", null, ".S'Z'", ".SS'Z'", ".SSS'Z'"
	};
	String s = null;
	int offset = date.length() - 20;
	if (offset < 0 || offset >= suffix.length || suffix[offset] == null)
	{
		throw new ParseException(errorMsgText);
	}
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"
			+ suffix[offset]);
	try {
		return sdf.parse(date);
	} catch(java.text.ParseException e) {
		throw new ParseException(errorMsgText);
	} 
  }
  /* */
  
  protected boolean isIntField(FusionField ft) {
	DefaultFieldType dft = ft.getFieldType();
	return dft == DefaultFieldType.INT;
  }
  
  protected boolean isLongField(FusionField ft) {
	DefaultFieldType dft = ft.getFieldType();
	return dft == DefaultFieldType.LONG;
  }

  protected boolean isFloatField(FusionField ft) {
	DefaultFieldType dft = ft.getFieldType();
	return dft == DefaultFieldType.FLOAT;
  }  

  protected boolean isDoubleField(FusionField ft) {
	DefaultFieldType dft = ft.getFieldType();
	return dft == DefaultFieldType.DOUBLE;
  }
  
  protected boolean isDateField(FusionField ft) {
	DefaultFieldType dft = ft.getFieldType();
	return dft == DefaultFieldType.DATE;
  }
  
  /**
   * Builds a new MatchAllDocsQuery instance
   * @return new MatchAllDocsQuery instance
   */
  protected MatchAllDocsQuery newMatchAllDocsQuery() {
    return new MatchAllDocsQuery(); 
  }

  /**
   * Builds a new WildcardQuery instance
   * @param t wildcard term
   * @return new WildcardQuery instance
   */
  protected WildcardQuery newWildcardQuery(Term t) {
    WildcardQuery query = new WildcardQuery(t);
    return query;
  }

  /**
   * Factory method for generating query, given a set of clauses.
   * By default creates a boolean query composed of clauses passed in.
   *
   * Can be overridden by extending classes, to modify query being
   * returned.
   *
   * @param clauses List that contains {@link BooleanClause} instances
   *    to join.
   * @param disableCoord true if coord scoring should be disabled.
   *
   * @return Resulting {@link Query} object.
   * @exception ParseException throw in overridden method to disallow
   */
  protected Query getBooleanQuery(List<BooleanClause> clauses)
    throws ParseException
  {
    if (clauses.size()==0) {
      return null; // all clause words were filtered away by the analyzer.
    }
    BooleanQuery query = newBooleanQuery();
    for(BooleanClause clause: clauses) {
      query.add(clause);
    }
    return query;
  }

  /**
   * Factory method for generating a query. Called when parser
   * parses an input term token that contains one or more wildcard
   * characters (? and *), but is not a prefix term token (one
   * that has just a single * character at the end)
   *<p>
   * Depending on settings, prefix term may be lower-cased
   * automatically. It will not go through the default Analyzer,
   * however, since normal Analyzers are unlikely to work properly
   * with wildcard templates.
   *<p>
   * Can be overridden by extending classes, to provide custom handling for
   * wildcard queries, which may be necessary due to missing analyzer calls.
   *
   * @param field Name of the field query will use.
   * @param termStr Term token that contains one or more wild card
   *   characters (? or *), but is not simple prefix term
   *
   * @return Resulting {@link Query} built for the term
   * @exception ParseException throw in overridden method to disallow
   */
  protected WildcardQuery getWildcardQuery(String field, String termStr) throws ParseException
  {
    //"*:*" is handled earlier
    
    if (!allowLeadingWildcard && (termStr.startsWith("*") || termStr.startsWith("?")))
      throw new ParseException("'*' or '?' not allowed as first character in WildcardQuery");
    
    if (lowercaseExpandedTerms) {
      termStr = termStr.toLowerCase();
    }
    
    Term term = newTerm(field, termStr);
    return newWildcardQuery(term);
  }
  
  /**
   * Factory method for generating a query (similar to
   * {@link #getWildcardQuery}). Called when parser parses an input term
   * token that uses prefix notation; that is, contains a single '*' wildcard
   * character as its last character. Since this is a special case
   * of generic wildcard term, and such a query can be optimized easily,
   * this usually results in a different query object.
   *<p>
   * Depending on settings, a prefix term may be lower-cased
   * automatically. It will not go through the default Analyzer,
   * however, since normal Analyzers are unlikely to work properly
   * with wildcard templates.
   *<p>
   * Can be overridden by extending classes, to provide custom handling for
   * wild card queries, which may be necessary due to missing analyzer calls.
   *
   * @param field Name of the field query will use.
   * @param termStr Term token to use for building term for the query
   *    (<b>without</b> trailing '*' character!)
   *
   * @return Resulting {@link Query} built for the term
   * @exception ParseException throw in overridden method to disallow
   */
  protected PrefixQuery getPrefixQuery(String field, String termStr) throws ParseException
  {
    if (!allowLeadingWildcard && termStr.startsWith("*"))
      throw new ParseException("'*' not allowed as first character in PrefixQuery");
    if (lowercaseExpandedTerms) {
      termStr = termStr.toLowerCase();
    }
    Term t = newTerm(field, termStr);
    return newPrefixQuery(t);
  }

   /**
   * Factory method for generating a query (similar to
   * {@link #getWildcardQuery}). Called when parser parses
   * an input term token that has the fuzzy suffix (~) appended.
   *
   * @param field Name of the field query will use.
   * @param termStr Term token to use for building term for the query
   *
   * @return Resulting {@link Query} built for the term
   * @exception ParseException throw in overridden method to disallow
   */
  protected FuzzyQuery getFuzzyQuery(String field, String termStr, Integer maxEdits) throws ParseException
  {
    if (lowercaseExpandedTerms) {
      termStr = termStr.toLowerCase();
    }
    Term t = newTerm(field, termStr);
    return newFuzzyQuery(t, maxEdits);
  }

  /**
   * Returns a String where the escape char has been
   * removed, or kept only once if there was a double escape.
   * 
   * Supports escaped unicode characters, e. g. translates
   * <code>\\u0041</code> to <code>A</code>.
   * 
   */
  private String discardEscapeChar(String input) throws ParseException {
    // Create char array to hold unescaped char sequence
    char[] output = new char[input.length()];

    // The length of the output can be less than the input
    // due to discarded escape chars. This variable holds
    // the actual length of the output
    int length = 0;

    // We remember whether the last processed character was 
    // an escape character
    boolean lastCharWasEscapeChar = false;

    // The multiplier the current unicode digit must be multiplied with.
    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...
    int codePointMultiplier = 0;

    // Used to calculate the codepoint of the escaped unicode character
    int codePoint = 0;

    for (int i = 0; i < input.length(); i++) {
      char curChar = input.charAt(i);
      if (codePointMultiplier > 0) {
        codePoint += hexToInt(curChar) * codePointMultiplier;
        codePointMultiplier >>>= 4;
        if (codePointMultiplier == 0) {
          output[length++] = (char)codePoint;
          codePoint = 0;
        }
      } else if (lastCharWasEscapeChar) {
        if (curChar == 'u') {
          // found an escaped unicode character
          codePointMultiplier = 16 * 16 * 16;
        } else {
          // this character was escaped
          output[length] = curChar;
          length++;
        }
        lastCharWasEscapeChar = false;
      } else {
        if (curChar == '\\') {
          lastCharWasEscapeChar = true;
        } else {
          output[length] = curChar;
          length++;
        }
      }
    }

    if (codePointMultiplier > 0) {
      throw new ParseException("Truncated unicode escape sequence.");
    }

    if (lastCharWasEscapeChar) {
      throw new ParseException("Term can not end with escape character.");
    }

    return new String(output, 0, length);
  }

  /** Returns the numeric value of the hexadecimal character */
  private static final int hexToInt(char c) throws ParseException {
    if ('0' <= c && c <= '9') {
      return c - '0';
    } else if ('a' <= c && c <= 'f'){
      return c - 'a' + 10;
    } else if ('A' <= c && c <= 'F') {
      return c - 'A' + 10;
    } else {
      throw new ParseException("None-hex character in unicode escape sequence: " + c);
    }
  }

  /**
   * Returns a String where those characters that QueryParser
   * expects to be escaped are escaped by a preceding <code>\</code>.
   */
  public static String escape(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      // These characters are part of the query syntax and must be escaped
      if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'
        || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~'
        || c == '*' || c == '?' || c == '|' || c == '&') {
        sb.append('\\');
      }
      sb.append(c);
    }
    return sb.toString();
  }

  protected Integer getFuzzySlop(Token slop) throws ParseException
  {
      Integer result = null;
      if(slop != null) {
          String slopStr = slop.image.substring(1);
          try {
            if(slopStr.length() > 0)
                result = Float.valueOf(slopStr).intValue();
          } catch (Exception ex1) {
            log.warn("Can't parse fuzzy slop: '"+slopStr+"'", ex1);
          }

         if(result != null && (result < 0 || result > 2)){
           throw new ParseException("Minimum similarity for a FuzzyQuery has to be between 0 and 2!");
         }
     }
     return result;
  }

}

PARSER_END(QueryParser)

/* ***************** */
/* Token Definitions */
/* ***************** */

<*> TOKEN : {
  <#_NUM_CHAR:   ["0"-"9"] >
// every character that follows a backslash is considered as an escaped character
| <#_ESCAPED_CHAR: "\\" ~[] >
| <#_TERM_START_CHAR: ( ~[ " ", "\t", "\n", "\r", "\u3000", "+", "-", "!", "(", ")", ":", "^", "[", "]", "\"", "{", "}", "~", "*", "?", "\\", "=" ]
                        | <_ESCAPED_CHAR> ) >
| <#_TERM_CHAR: ( <_TERM_START_CHAR> | <_ESCAPED_CHAR> | "-" | "+" ) >
| <#_WHITESPACE: ( " " | "\t" | "\n" | "\r" | "\u3000") >
| <#_QUOTED_CHAR: ( ~[ "\"", "\\" ] | <_ESCAPED_CHAR> ) >
}

<DEFAULT, RangeIn, RangeEx> SKIP : {
  < <_WHITESPACE>>
}

<DEFAULT> TOKEN : {
  <AND:       ("AND" | "&&") >
| <OR:        ("OR" | "||") >
| <META_START: "{!" >
| <META_END:   "}" >
| <NOT:       ("NOT" | "!") >
| <PLUS:      "+" >
| <MINUS:     "-" >
| <BAREOPER:  ("+"|"-"|"!") <_WHITESPACE> >
| <LPAREN:    "(" >
| <RPAREN:    ")" >
| <COLON:     ":" >
| <EQUAL:     "=" >
| <STAR:      "*" >
| <CARAT:     "^" > : Boost
| <QUOTED:     "\"" (<_QUOTED_CHAR>)* "\"">
| <META_EX:   "ex" >
| <META_TAG:  "tag" >
| <TERM:      <_TERM_START_CHAR> (<_TERM_CHAR>)*  >
| <FUZZY_SLOP:     "~" ( (<_NUM_CHAR>)+ ( "." (<_NUM_CHAR>)+ )? )? >
| <ALL_DOCS:  <STAR> <COLON> <STAR> >
| <PREFIXTERM:  ("*") | ( <_TERM_START_CHAR> (<_TERM_CHAR>)* "*" ) >
| <WILDTERM:  (<_TERM_START_CHAR> | [ "*", "?" ]) (<_TERM_CHAR> | ( [ "*", "?" ] ))* >
| <RANGEIN_START: "[" > : RangeIn
| <RANGEEX_START: "{" > : RangeEx
| <DATE:
	<_NUM_CHAR><_NUM_CHAR><_NUM_CHAR><_NUM_CHAR> "-"
	<_NUM_CHAR><_NUM_CHAR> "-"
	<_NUM_CHAR><_NUM_CHAR> 
	"T"
	<_NUM_CHAR><_NUM_CHAR> ":" <_NUM_CHAR><_NUM_CHAR> ":" <_NUM_CHAR><_NUM_CHAR>
	("." <_NUM_CHAR> (<_NUM_CHAR> (<_NUM_CHAR>)? )? )?
	"Z" 
  >
}

<Boost> TOKEN : {
<NUMBER:    (<_NUM_CHAR>)+ ( "." (<_NUM_CHAR>)+ )? > : DEFAULT
}

<RangeIn> TOKEN : {
<RANGEIN_TO: "TO">
| <RANGEIN_END: "]"> : DEFAULT
| <RANGEIN_QUOTED: "\"" (~["\""] | "\\\"")+ "\"">
| <RANGEIN_GOOP: (~[ " ", "]" ])+ >
}

<RangeEx> TOKEN : {
<RANGEEX_TO: "TO">
| <RANGEEX_END: "}"> : DEFAULT
| <RANGEEX_QUOTED: "\"" (~["\""] | "\\\"")+ "\"">
| <RANGEEX_GOOP: (~[ " ", "}" ])+ >
}

// ___open_Parenthesesy_counter______________________________________________

void LPAREN() :
{
}
{
  <LPAREN> { ++openParentheses; }
}

void RPAREN() :
{
}
{
  { --openParentheses; } <RPAREN>
}



// ___Query__________________________________________________________________
//

int Conjunction() : {
  int ret = CONJ_NONE;
}
{
  [
    <AND> { ret = CONJ_AND; }
    | <OR>  { ret = CONJ_OR; }
  ]
  { return ret; }
}

int Modifiers() : {
  int ret = MOD_NONE;
}
{
  [
     <PLUS> { ret = MOD_REQ; }
     | <MINUS> { ret = MOD_NOT; }
     | <NOT> { ret = MOD_NOT; }
  ]
  { return ret; }
}

// This makes sure that there is no garbage after the query string
Query TopLevelQuery(String field) : 
{
	Query q;
}
{
	q=LuceneQuery(field) errorOnRPAREN() <EOF>
	{
		return q;
	}
}


void errorOnRPAREN():
{
}
{
  [ <RPAREN >
  {
    int column = this.token_source.input_stream.getBeginColumn();
    int line = this.token_source.input_stream.getBeginLine();
    ParseException parseException = new ParseException("Found unmatched closing parenthesis at line " + line + ", column " + column);
    throw parseException;
  }
  ]
}

Query LuceneQuery(String field) :
{
  Query q;
}
{
    q = Query(field)
    {
      return q;
    }
}

Query Query(String field) :
{
  List<BooleanClause> clauses = new ArrayList<BooleanClause>();
  Query q, firstQuery=null;
  int conj, mods;
  MetaInfo mi = null;
}
{
  (mi = metaInfo())? mods=Modifiers() q=Clause(field)
  {
    addClause(clauses, CONJ_NONE, mods, q);
    if (mods == MOD_NONE)
        firstQuery=q;
  }
  (
    conj=Conjunction() mods=Modifiers() q=Clause(field)
    { addClause(clauses, conj, mods, q); }
  )*
    {
      Query result;
      if (clauses.size() == 1 && firstQuery != null)
        result = firstQuery;
      else {
        result = getBooleanQuery(clauses);
      }
      result.setMetaInfo(mi);
      return result;
    }
}

MetaInfo metaInfo() : {
  Token n;
  Token v;
  MetaInfo mi = new MetaInfo();
}
{
    < META_START >
    (
        n = < META_EX >
        < EQUAL >
        v = < TERM >
        {
            mi.setName(n.image);
            mi.setValue(v.image);
        }
    |   n = < META_TAG >
        < EQUAL >
        v = < TERM >
        {
            mi.setName(n.image);
            mi.setValue(v.image);
        }
    )
    < META_END >
    {
      return mi;
    }
}

Query Clause(String field) : {
  Query q;
  Token fieldToken=null, boost=null;
}
{
  (
    < ALL_DOCS >
    {
      return new MatchAllDocsQuery();
    }
  |
    [
      LOOKAHEAD(2)
      (
      fieldToken=<TERM> <COLON> {field=discardEscapeChar(fieldToken.image);}
      | <STAR> <COLON> {field="*";}
      )
    ]
    
    (
     q=Term(field)
     | LPAREN() q=LuceneQuery(field) RPAREN() (<CARAT> boost=<NUMBER>)?
    )
    {
      if (boost != null) {
        float f = (float)1.0;
  try {
    f = Float.valueOf(boost.image).floatValue();
          q.setBoost(f);
  } catch (Exception ignored) { }
      }
      return q;
    }
  )
}

// ___Term_______________________________________________________________

Query Term(String field) : {
  Token term, boost=null, fuzzySlop=null, goop1, goop2;
  boolean prefix = false;
  boolean wildcard = false;
  boolean fuzzy = false;
  boolean isDateVal = false;
  Query result;
}
{
  (
     (
       term=<TERM>
       | term=<STAR> { wildcard=true; }
       | term=<PREFIXTERM> { prefix=true; }
       | term=<WILDTERM> { wildcard=true; }
       | term=<NUMBER>
       | term=<DATE> { isDateVal=true; }
       | term=<BAREOPER> { term.image = term.image.substring(0,1); }
     )
     [ fuzzySlop=<FUZZY_SLOP> { fuzzy=true; } ]
     [ <CARAT> boost=<NUMBER> [ fuzzySlop=<FUZZY_SLOP> { fuzzy=true; } ] ]
     {
       String termImage=discardEscapeChar(term.image);
       if (wildcard) {
       result = getWildcardQuery(field, termImage);
       } else if (prefix) {
         result = getPrefixQuery(field,
           discardEscapeChar(term.image.substring
          (0, term.image.length()-1)));
       } else if (fuzzy) {
       	  Integer fms = getFuzzySlop(fuzzySlop);
       	 result = getFuzzyQuery(field, termImage, fms);
       } else {
         result = getFieldQuery(field, termImage);
       }
     }
     | ( <RANGEIN_START> ( goop1=<RANGEIN_GOOP>|goop1=<RANGEIN_QUOTED>|goop1=<NUMBER> )
         [ <RANGEIN_TO> ] ( goop2=<RANGEIN_GOOP>|goop2=<RANGEIN_QUOTED>|goop2=<NUMBER> )
         <RANGEIN_END> )
       [ <CARAT> boost=<NUMBER> ]
        {
	  {
            boolean startOpen=false;
            boolean endOpen=false;
            if (goop1.kind == RANGEIN_QUOTED) {
              goop1.image = goop1.image.substring(1, goop1.image.length()-1);
            } else if ("*".equals(goop1.image)) {
              startOpen = true;
            }
            if (goop2.kind == RANGEIN_QUOTED) {
              goop2.image = goop2.image.substring(1, goop2.image.length()-1);
            } else if ("*".equals(goop2.image)) {
              endOpen = true;
            }
            result = getRangeQuery(field, startOpen ? null : discardEscapeChar(goop1.image), endOpen ? null : discardEscapeChar(goop2.image), true);
          }
        }
     | ( <RANGEEX_START> ( goop1=<RANGEEX_GOOP>|goop1=<RANGEEX_QUOTED>|goop1=<NUMBER> )
         [ <RANGEEX_TO> ] ( goop2=<RANGEEX_GOOP>|goop2=<RANGEEX_QUOTED>|goop2=<NUMBER> )
         <RANGEEX_END> )
       [ <CARAT> boost=<NUMBER> ]
        {
	  {
            boolean startOpen=false;
            boolean endOpen=false;
            if (goop1.kind == RANGEEX_QUOTED) {
              goop1.image = goop1.image.substring(1, goop1.image.length()-1);
            } else if ("*".equals(goop1.image)) {
              startOpen = true;
            }
            if (goop2.kind == RANGEEX_QUOTED) {
              goop2.image = goop2.image.substring(1, goop2.image.length()-1);
            } else if ("*".equals(goop2.image)) {
              endOpen = true;
            }
  
            result = getRangeQuery(field, startOpen ? null : discardEscapeChar(goop1.image), endOpen ? null : discardEscapeChar(goop2.image), false);
          }
        }
     | term=<QUOTED>
       [ fuzzySlop=<FUZZY_SLOP> ]
       [ <CARAT> boost=<NUMBER> ]
       {
         Integer s = getFuzzySlop(fuzzySlop);
         result = getPhraseQuery(field, discardEscapeChar(term.image.substring(1, term.image.length()-1)), s);
       }
  )
  {
    if (boost != null) {
      float f = (float) 1.0;
      try {
        f = Float.valueOf(boost.image).floatValue();
      }
      catch (Exception ignored) {
        log.error("Caught exception while parsing boost value: "+boost.image);
      }

      // avoid boosting null queries, such as those caused by stop words
      if (result != null) {
        result.setBoost(f);
      }
    }
    return result;
  }
}