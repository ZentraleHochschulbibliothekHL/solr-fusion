<?xml version="1.0" encoding="UTF-8"?>
<om:solr-server name="BibliothekA" version="3.6"
                class="org.outermedia.solrfusion.adapter.solr.DefaultSolrAdapter$Factory"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:om="http://solrfusion.outermedia.org/configuration/"
                xmlns="http://solrfusion.outermedia.org/configuration/type/">

    <om:url>http://host:port/solr/xyz</om:url>

    <om:score factor="1.2" class="org.outermedia.solrfusion.DefaultScore$Factory"/>

    <!-- overwrite global setting example -->
    <om:response-parser
            class="org.outermedia.solrfusion.SpecialResponseParser$Factory"/>

    <!-- the <id-generator> has to know how to identify solr -->
    <!-- docs by id -->
    <om:unique-key>id</om:unique-key>

    <om:max-docs>100</om:max-docs>

    <!-- the following field mappings have to cover all -->
    <!-- fields listed in <fusion-schema-fields> -->

    <!-- simply map a field name, values are not converted -->
    <om:field name="start" fusion-name="city"/>

    <!-- use the wildcard "*" as postfix in name and fusion-name -->
    <!-- to address dynamic fields -->
    <!-- both fields have to use a wildcard! -->
    <om:field name="*_text" fusion-name="*_t"/>
    <om:field name="int_*" fusion-name="i_*"/>

    <!-- mapping is defined in a table, which is stored in a file -->
    <om:field name="u" fusion-name="user">
        <om:change>
            <!-- the mapping has to be bijective -->
            <om:query-response type="static-table-file">
                <file>mapping_file-username.xml</file>
            </om:query-response>
        </om:change>
    </om:field>

    <!-- mapping is defined in a table -->
    <om:field name="u" fusion-name="user">
        <om:change>
            <!-- the mapping has to be bijective -->
            <om:query-response type="static-table">
                <entry>
                    <value>u1</value>
                    <fusion-value>user1</fusion-value>
                </entry>
                <entry>
                    <value>u2</value>
                    <fusion-value>user2</fusion-value>
                </entry>
            </om:query-response>
        </om:change>
    </om:field>

    <!-- map a field with extra operations on the values -->
    <!-- in the query and response -->
    <!-- valid operations are <om:change>, <om:add>, <om:drop> -->
    <!-- <om:change> is only processed when a value exists -->
    <!-- <om:add>/<om:drop> are always processed-->
    <!-- operations are processed in textual order -->
    <!-- <om:change>: <om:response> searches "name" in the solr -->
    <!-- response and maps it to "fusion-name" -->
    <!-- <om:add>: <om:response> ignores the perhaps missing "name" -->
    <!-- in the solr response and adds a value for "fusion-name" -->
    <!-- <om:change>: <om:query> searches "fusion-name" in the -->
    <!-- fusion query and maps it to the "name" in the solr query -->
    <!-- <om:add>: <om:query> ignores the perhaps missing "fusion-name" -->
    <!-- in the fusion query and adds a value for "name" in -->
    <!-- the solr query -->
    <!-- <om:drop> removes the field either from the query or -->
    <!-- response -->
    <om:field name="start" fusion-name="city">
        <om:change>
            <om:response type="javascript-file">
                <file>Pfad.js</file>
            </om:response>
            <om:response type="java-class">
                <class>org.outermedia.solrfusion.ComplexAction</class>
            </om:response>
            <om:query type="beanshell-file">
                <file>Pfad.bsh</file>
            </om:query>
            <om:query type="beanshell">
                <script><![CDATA[
                    currentQuery =
                        currentQuery.replace("XXX",System.currentTimeMillis());
                ]]></script>
            </om:query>
            <om:query type="regexp">
                <pattern>ab(.*)ende</pattern>
                <replacement>AB\1de</replacement>
            </om:query>
        </om:change>
    </om:field>

    <!-- ignore field in response -->
    <om:field name="ende52">
        <om:drop>
            <om:response/>
        </om:drop>
    </om:field>

    <!-- ignore field in query -->
    <om:field fusion-name="ende52">
        <om:drop>
            <om:query/>
        </om:drop>
    </om:field>

    <!-- ignore field in query and response -->
    <om:field name="ende52" fusion-name="ende">
        <om:drop>
            <om:response/>
            <om:query/>
        </om:drop>
    </om:field>

    <!-- add field to response, but ignore query value -->
    <om:field name="ende51" fusion-name="ende">
        <om:drop>
            <om:query/>
        </om:drop>
        <om:add level="outside">
            <!-- <om:query> not valid, because field is dropped -->
            <om:response type="beanshell-file">
                <file>Pfad.bsh</file>
            </om:response>
        </om:add>
    </om:field>

    <om:field
            name-pattern="val([0-9]+)Start" fusion-name-replacement="valueFrom(\1)"
            name-replacement="val(\1)Start" fusion-name-pattern="valueFrom([0-9]+)"
            />

    <om:post-processor>
        <om:query type="send-if-fq-eq">
            <fusion-name>solr-server</fusion-name>
            <fusion-value>UBL4</fusion-value>
        </om:query>
    </om:post-processor>

</om:solr-server>        
        